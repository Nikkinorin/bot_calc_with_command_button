from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, ConversationHandler

TOKEN = '8166412144:AAH6gFmQPOjGn3CSoDmwJuSBzSxEfbQ8x8M'

PRICE, WEIGHT, FREIGHT, EXTRA, DUTY, VAT = range(6)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç", callback_data='start_calc')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç.", reply_markup=reply_markup)
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'start_calc':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ (USD):")
        return PRICE
async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–∫–≥):")
    return WEIGHT
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weight'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—Ä–∞—Ö—Ç–∞ (USD):")
    return FREIGHT
async def get_freight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['freight'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã (USD):")
    return EXTRA
async def get_extra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['extra'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—à–ª–∏–Ω—ã (%):")
    return DUTY
async def get_duty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['duty'] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ù–î–° (%):")
    return VAT
async def get_vat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['vat'] = float(update.message.text)
    result = calculate(context.user_data)
    keyboard = [[InlineKeyboardButton("/start", callback_data='start_calc')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(result, reply_markup=reply_markup, parse_mode='HTML')
    return ConversationHandler.END
def calculate(data):
    price, weight, freight, extra, duty, vat = data.values()
    total_freight_per_kg = (freight + extra) / weight
    total_price_per_kg = price + total_freight_per_kg
    duty_per_kg = (duty / 100) * price
    vat_per_kg = (vat / 100) * price
    total_per_kg = price + total_freight_per_kg + duty_per_kg + vat_per_kg
    total_per_ton = total_per_kg * 1000
    return f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:</b>\nüí≤ –¶–µ–Ω–∞ –∑–∞ –∫–≥: {price:.2f} USD\n‚öñ –í–µ—Å: {weight:.2f} –∫–≥\nüöö –§—Ä–∞—Ö—Ç: {freight:.2f} USD\nüíº –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã: {extra:.2f} USD\nüí∏ –ü–æ—à–ª–∏–Ω–∞: {duty:.1f}%\nüí° –ù–î–°: {vat:.1f}%\n---------------------\nüöö –§—Ä–∞—Ö—Ç –∑–∞ –∫–≥: {total_freight_per_kg:.4f} USD\nüí∏ –ü–æ—à–ª–∏–Ω–∞ –∑–∞ –∫–≥: {duty_per_kg:.4f} USD\nüí° –ù–î–° –∑–∞ –∫–≥: {vat_per_kg:.4f} USD\n---------------------\nüí∞ –ò—Ç–æ–≥ –∑–∞ –∫–≥: {total_per_kg:.4f} USD\nüí∞ –ò—Ç–æ–≥ –∑–∞ —Ç–æ–Ω–Ω—É: {total_per_ton:.2f} USD" 

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CallbackQueryHandler(button)],
        states={
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            FREIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_freight)],
            EXTRA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_extra)],
            DUTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duty)],
            VAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vat)]
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler)
    app.run_polling()
