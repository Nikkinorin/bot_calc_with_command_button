from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
import os

TOKEN = '8166412144:AAH6gFmQPOjGn3CSoDmwJuSBzSxEfbQ8x8M'
PORT = int(os.environ.get('PORT', 5000))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PRICE, WEIGHT, FREIGHT, EXTRA_COST, DUTY, NDS = range(6)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üí≤ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ (USD):", reply_markup=ReplyKeyboardRemove())
    return PRICE

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = float(update.message.text.strip())
    await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–∫–≥):")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weight'] = float(update.message.text.strip())
    await update.message.reply_text("üöö –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—Ä–∞—Ö—Ç–∞ (USD):")
    return FREIGHT

async def freight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['freight'] = float(update.message.text.strip())
    await update.message.reply_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã (USD):")
    return EXTRA_COST

async def extra_cost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['extra_cost'] = float(update.message.text.strip())
    await update.message.reply_text("üßæ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—à–ª–∏–Ω—ã (%):")
    return DUTY

async def duty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['duty'] = float(update.message.text.strip())
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ù–î–° (%):")
    return NDS

async def nds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nds'] = float(update.message.text.strip())
    price_per_kg = context.user_data['price']
    weight_kg = context.user_data['weight']
    freight = context.user_data['freight']
    extra_costs = context.user_data['extra_cost']
    duty = context.user_data['duty']
    nds = context.user_data['nds']
    total_freight = freight + extra_costs
    freight_per_kg = total_freight / weight_kg
    base_price_per_kg = price_per_kg + freight_per_kg
    duty_amount = base_price_per_kg * (duty / 100)
    nds_amount = (base_price_per_kg + duty_amount) * (nds / 100)
    final_price_per_kg = base_price_per_kg + duty_amount + nds_amount
    final_price_per_ton = final_price_per_kg * 1000 + extra_costs
    keyboard = [["/start"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    result = (
        "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:*\n\n"
        f"üí≤ *–¶–µ–Ω–∞ –∑–∞ –∫–≥:* `{price_per_kg:.2f}` USD\n"
        f"‚öñÔ∏è *–í–µ—Å:* `{weight_kg:.2f}` –∫–≥\n"
        f"üöö *–§—Ä–∞—Ö—Ç:* `{freight:.2f}` USD\n"
        f"üì¶ *–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã:* `{extra_costs:.2f}` USD\n"
        f"üßæ *–ü–æ—à–ª–∏–Ω–∞:* `{duty}%`\n"
        f"üí∞ *–ù–î–°:* `{nds}%`\n\n"
        f"üìà *–§—Ä–∞—Ö—Ç –∑–∞ –∫–≥:* `{freight_per_kg:.4f}` USD\n"
        f"üìà *–ü–æ—à–ª–∏–Ω–∞ –∑–∞ –∫–≥:* `{duty_amount:.4f}` USD\n"
        f"üìà *–ù–î–° –∑–∞ –∫–≥:* `{nds_amount:.4f}` USD\n\n"
        f"‚úÖ *–ò—Ç–æ–≥ –∑–∞ –∫–≥:* `{final_price_per_kg:.4f}` USD\n"
        f"‚úÖ *–ò—Ç–æ–≥ –∑–∞ —Ç–æ–Ω–Ω—É:* `{final_price_per_ton:.2f}` USD\n\n"
        "_–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞._"
    )
    await update.message.reply_text(result, parse_mode="Markdown", reply_markup=reply_markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('‚ùå –†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()

# –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
        FREIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, freight)],
        EXTRA_COST: [MessageHandler(filters.TEXT & ~filters.COMMAND, extra_cost)],
        DUTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, duty)],
        NDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, nds)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)
app.add_handler(conv_handler)

if __name__ == '__main__':
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://bot-calc-with-command-button.onrender.com/{TOKEN}"
    )
